<?php

namespace callow\util;


require_once dirname(__FILE__) . '/../../../../callow/util/GenericCollection.php';

/**
 * Test class for GenericCollection.
 * Generated by PHPUnit on 2012-06-28 at 12:29:16.
 */
class GenericCollectionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var GenericCollection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new GenericCollection();

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers callow\util\GenericCollection::add
     * @todo Implement testAdd().
     */
    public function testAddWithoutKey()
    {

        $this->object->add('nokey');
        $this->assertContains('nokey', $this->object->toArray());

    }

    public function testAddWithKey()
    {
        $this->object->add('withkey', 'i have a key');
        $this->assertArrayHasKey('withkey', $this->object->toArray());
    }

    public function testAddMixed()
    {


     $this->object->add('zero');
     $this->object->add(1, 'one');
     $this->object->add('two');
     $this->object->add(3, 'three');

     $this->assertEquals(array('zero', 'one'=>1, 'two', '3'=>'three'), $this->object->toArray());

    }


    /**
     * @depends testAddWithKey
     * @depends testAddWithoutKey
     * @depends testAddMixed
     */
    public function testOverwrite()
    {

        $this->object->add('oldvalue');

        $this->object->add('key', 'oldvalue');

        $this->object->add(0, 'newvalue');

        $this->object->add('key', 'newvalue');

        $array = $this->object->toArray();

        $this->assertEquals('newvalue', $array[0]);

        $this->assertEquals('newvalue', $array['key']);

    }


    /**
     * @covers callow\util\GenericCollection::remove
     * @todo Implement testRemove().
     */
    public function testRemove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    /**
     * @covers callow\util\GenericCollection::getIterator
     * @todo Implement testGetIterator().
     */
    public function testGetIterator()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    /**
     * @covers callow\util\GenericCollection::get
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    /**
     * @covers callow\util\GenericCollection::count
     * @todo Implement testCount().
     */
    public function testCount()
    {

        $this->object->add('one')->add('two', 2)->add('three');

        $array = $this->object->toArray();

        $this->assertEquals(count($array), $this->object->count());

    }

    /**
     * @covers callow\util\GenericCollection::toArray
     * @todo Implement testToArray().
     */
    public function testToArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    /**
     * @covers callow\util\GenericCollection::hasIndex
     * @todo Implement testHasIndex().
     * @depends testAddWithKey
     */
    public function testHasIndex()
    {

        $this->object->add('key', 'value');
        $this->assertTrue($this->object->hasIndex('key'));
        $this->assertFalse($this->hasIndex('value'));
    }

    /**
     * @covers callow\util\GenericCollection::contains
     * @depends testAddWithKey
     */
    public function testContains()
    {

        $this->add('something');

        $this->assertFalse($this->contains('something'));

    }

    /**
     * @covers callow\util\GenericCollection::offsetSet
     * @depends testOffsetExists
     */
    public function testOffsetSet()
    {
        $this->object['item'] = 'set';

        $array = $this->object->toArray();

        $this->assertEquals('set', $array['item']);

    }

    /**
     * @covers callow\util\GenericCollection::offsetExists
     * @depends testAddWithKey
     */
    public function testOffsetExists()
    {

        $this->object['item'] = 'set';

        $array = $this->object->toArray();

        $this->assertArrayHasKey('item', $array);
    }

    /**
     * @covers callow\util\GenericCollection::offsetUnset
     * @depends testOffsetSet
     */
    public function testOffsetUnset()
    {

        $this->object['item'] = 'set';

        $this->object['meti'] = 'reset';

        $this->object->remove('meti');

        $array = $this->object->toArray();

        $this->assertArrayNotHasKey('meti', $array);

    }

    /**
     * @covers callow\util\GenericCollection::offsetGet
     * @todo Implement testOffsetGet().
     */
    public function testOffsetGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

}

?>


?>
